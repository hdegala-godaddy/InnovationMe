{"ast":null,"code":"import ThresholdFetchService from './ThresholdFetchService';\n\nfunction Node(empDetails) {\n  if (!empDetails) return null;\n  let obj = {};\n  obj[empDetails.name] = {\n    'id': empDetails.id,\n    'reports': empDetails.reports\n  };\n  return obj;\n}\n\nclass EmpFetchService {\n  constructor(empId) {\n    //this.empTree = new Map();\n    this.empIDToTreeNodeMap = new Map();\n    this.initialEmpId = empId;\n  }\n\n  insertIntoTree(parentEmpId, empId, node) {\n    this.empIDToTreeNodeMap.set(empId, node);\n\n    if (parentEmpId) {\n      let parentNode = this.empIDToTreeNodeMap.get(parentEmpId);\n      parentNode.reports.push(node);\n    }\n  }\n\n  async fetchAndFillEmpDetails(empId = this.initialEmpId, parentEmpId = null) {\n    try {\n      let empDetails = await ThresholdFetchService.fetch(empId);\n      let treeNode = new Node(empDetails);\n      this.insertIntoTree(parentEmpId, empId, treeNode);\n      empDetails.reports.forEach((id, empId) => {\n        if (!this.empIDToTreeNodeMap.has(id)) {\n          this.fetchAndFillEmpDetails(id, empId);\n        }\n      });\n    } catch (excp) {\n      // alert(excp);\n      console.log(excp);\n    }\n\n    return this.empIDToTreeNodeMap;\n  }\n\n}\n\nexport default EmpFetchService;","map":{"version":3,"sources":["/Users/harshadegala/Code/React/assignment/src/EmpFetchService.js"],"names":["ThresholdFetchService","Node","empDetails","obj","name","id","reports","EmpFetchService","constructor","empId","empIDToTreeNodeMap","Map","initialEmpId","insertIntoTree","parentEmpId","node","set","parentNode","get","push","fetchAndFillEmpDetails","fetch","treeNode","forEach","has","excp","console","log"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,yBAAlC;;AAGA,SAASC,IAAT,CAAcC,UAAd,EAAyB;AACrB,MAAI,CAACA,UAAL,EACI,OAAO,IAAP;AAEJ,MAAIC,GAAG,GAAG,EAAV;AACAA,EAAAA,GAAG,CAACD,UAAU,CAACE,IAAZ,CAAH,GAAuB;AACnB,UAAOF,UAAU,CAACG,EADC;AAEnB,eAAYH,UAAU,CAACI;AAFJ,GAAvB;AAIA,SAAOH,GAAP;AACH;;AAED,MAAMI,eAAN,CAAqB;AAEjBC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd;AACA,SAAKC,kBAAL,GAA0B,IAAIC,GAAJ,EAA1B;AACA,SAAKC,YAAL,GAAoBH,KAApB;AACH;;AAEDI,EAAAA,cAAc,CAACC,WAAD,EAAaL,KAAb,EAAmBM,IAAnB,EAAwB;AAElC,SAAKL,kBAAL,CAAwBM,GAAxB,CAA4BP,KAA5B,EAAmCM,IAAnC;;AACA,QAAID,WAAJ,EAAiB;AACb,UAAIG,UAAU,GAAG,KAAKP,kBAAL,CAAwBQ,GAAxB,CAA4BJ,WAA5B,CAAjB;AACAG,MAAAA,UAAU,CAACX,OAAX,CAAmBa,IAAnB,CAAwBJ,IAAxB;AACH;AACJ;;AAED,QAAMK,sBAAN,CAA6BX,KAAK,GAAG,KAAKG,YAA1C,EAAwDE,WAAW,GAAG,IAAtE,EAA2E;AAEvE,QAAI;AACA,UAAIZ,UAAU,GAAG,MAAMF,qBAAqB,CAACqB,KAAtB,CAA4BZ,KAA5B,CAAvB;AACA,UAAIa,QAAQ,GAAG,IAAIrB,IAAJ,CAASC,UAAT,CAAf;AACA,WAAKW,cAAL,CAAoBC,WAApB,EAAiCL,KAAjC,EAAwCa,QAAxC;AAEApB,MAAAA,UAAU,CAACI,OAAX,CAAmBiB,OAAnB,CAA2B,CAAClB,EAAD,EAAKI,KAAL,KAAe;AACtC,YAAI,CAAC,KAAKC,kBAAL,CAAwBc,GAAxB,CAA4BnB,EAA5B,CAAL,EAAsC;AAClC,eAAKe,sBAAL,CAA4Bf,EAA5B,EAA+BI,KAA/B;AACH;AACJ,OAJD;AAMH,KAXD,CAWE,OAAMgB,IAAN,EAAY;AACX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACF;;AAED,WAAO,KAAKf,kBAAZ;AACH;;AApCgB;;AAuCrB,eAAeH,eAAf","sourcesContent":["import ThresholdFetchService from './ThresholdFetchService';\n\n\nfunction Node(empDetails){\n    if (!empDetails)\n        return null;\n\n    let obj = {};\n    obj[empDetails.name] = {\n        'id' : empDetails.id,\n        'reports' : empDetails.reports\n    };\n    return obj;\n}\n\nclass EmpFetchService{\n\n    constructor(empId){\n        //this.empTree = new Map();\n        this.empIDToTreeNodeMap = new Map();\n        this.initialEmpId = empId;\n    }\n\n    insertIntoTree(parentEmpId,empId,node){\n        \n        this.empIDToTreeNodeMap.set(empId, node);\n        if (parentEmpId) {\n            let parentNode = this.empIDToTreeNodeMap.get(parentEmpId);\n            parentNode.reports.push(node);\n        }\n    }\n\n    async fetchAndFillEmpDetails(empId = this.initialEmpId, parentEmpId = null){\n\n        try {\n            let empDetails = await ThresholdFetchService.fetch(empId);\n            let treeNode = new Node(empDetails);\n            this.insertIntoTree(parentEmpId, empId, treeNode);\n            \n            empDetails.reports.forEach((id, empId) => {\n                if (!this.empIDToTreeNodeMap.has(id)) {\n                    this.fetchAndFillEmpDetails(id,empId);\n                }\n            });\n\n        } catch(excp) {\n           // alert(excp);\n           console.log(excp);\n        }\n\n        return this.empIDToTreeNodeMap;\n    }\n}\n\nexport default EmpFetchService;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}