{"ast":null,"code":"import ThresholdFetchService from './ThresholdFetchService';\n\nfunction Node(empDetails) {\n  if (!empDetails) return null;\n  let obj = {};\n  obj[empDetails.name] = {\n    'id': empDetails.id,\n    'reports': []\n  };\n  return obj;\n}\n\nclass EmployeeFetchService {\n  constructor(empId, callBack) {\n    //this.empTree = new Map();\n    this.empIDToTreeNodeMap = new Map();\n    this.initialEmpId = empId;\n    this.callBack = callBack;\n  }\n\n  initEmpId(empID) {\n    this.initialEmpId = empID;\n  }\n\n  initCallBack(callBack) {\n    this.callBack = callBack;\n  }\n\n  insertIntoTree(parentEmpId, parentName, empId, node) {\n    this.empIDToTreeNodeMap.set(empId, node);\n\n    if (parentEmpId) {\n      let parentNode = this.empIDToTreeNodeMap.get(parentEmpId);\n      parentNode[parentName].reports.push(node);\n    }\n  }\n\n  async fetchAndFillEmpDetails(empId = this.initialEmpId, parentEmpId = null, parentName = '') {\n    try {\n      let empDetails = await ThresholdFetchService.fetch(empId);\n      let treeNode = new Node(empDetails);\n      this.insertIntoTree(parentEmpId, parentName, empId, treeNode);\n      this.callBack(this.empIDToTreeNodeMap);\n      empDetails.reports.forEach(id => {\n        if (!this.empIDToTreeNodeMap.has(id)) {\n          this.fetchAndFillEmpDetails(id, empId, empDetails.name);\n        }\n      });\n    } catch (excp) {\n      // alert(excp);\n      console.log(excp);\n    }\n\n    return this.empIDToTreeNodeMap;\n  }\n\n  getJson() {\n    return this.empIDToTreeNodeMap.get(this.initialEmpId);\n  }\n\n}\n\nlet EmpFetchService = new EmployeeFetchService();\nexport default EmpFetchService;","map":{"version":3,"sources":["/Users/harshadegala/Code/React/assignment/src/EmpFetchService.js"],"names":["ThresholdFetchService","Node","empDetails","obj","name","id","EmployeeFetchService","constructor","empId","callBack","empIDToTreeNodeMap","Map","initialEmpId","initEmpId","empID","initCallBack","insertIntoTree","parentEmpId","parentName","node","set","parentNode","get","reports","push","fetchAndFillEmpDetails","fetch","treeNode","forEach","has","excp","console","log","getJson","EmpFetchService"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,yBAAlC;;AAGA,SAASC,IAAT,CAAcC,UAAd,EAAyB;AACrB,MAAI,CAACA,UAAL,EACI,OAAO,IAAP;AAEJ,MAAIC,GAAG,GAAG,EAAV;AACAA,EAAAA,GAAG,CAACD,UAAU,CAACE,IAAZ,CAAH,GAAuB;AACnB,UAAOF,UAAU,CAACG,EADC;AAEnB,eAAY;AAFO,GAAvB;AAIA,SAAOF,GAAP;AACH;;AAED,MAAMG,oBAAN,CAA0B;AAEtBC,EAAAA,WAAW,CAACC,KAAD,EAAQC,QAAR,EAAiB;AACxB;AACA,SAAKC,kBAAL,GAA0B,IAAIC,GAAJ,EAA1B;AACA,SAAKC,YAAL,GAAoBJ,KAApB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACH;;AAEDI,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,SAAKF,YAAL,GAAoBE,KAApB;AACH;;AAEDC,EAAAA,YAAY,CAACN,QAAD,EAAW;AACnB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAEDO,EAAAA,cAAc,CAACC,WAAD,EAAaC,UAAb,EAAyBV,KAAzB,EAA+BW,IAA/B,EAAoC;AAE9C,SAAKT,kBAAL,CAAwBU,GAAxB,CAA4BZ,KAA5B,EAAmCW,IAAnC;;AACA,QAAIF,WAAJ,EAAiB;AACb,UAAII,UAAU,GAAG,KAAKX,kBAAL,CAAwBY,GAAxB,CAA4BL,WAA5B,CAAjB;AACAI,MAAAA,UAAU,CAACH,UAAD,CAAV,CAAuBK,OAAvB,CAA+BC,IAA/B,CAAoCL,IAApC;AACH;AACJ;;AAED,QAAMM,sBAAN,CAA6BjB,KAAK,GAAG,KAAKI,YAA1C,EAAwDK,WAAW,GAAG,IAAtE,EAA4EC,UAAU,GAAC,EAAvF,EAA0F;AAEtF,QAAI;AACA,UAAIhB,UAAU,GAAG,MAAMF,qBAAqB,CAAC0B,KAAtB,CAA4BlB,KAA5B,CAAvB;AACA,UAAImB,QAAQ,GAAG,IAAI1B,IAAJ,CAASC,UAAT,CAAf;AACA,WAAKc,cAAL,CAAoBC,WAApB,EAAiCC,UAAjC,EAA6CV,KAA7C,EAAoDmB,QAApD;AACA,WAAKlB,QAAL,CAAc,KAAKC,kBAAnB;AAEAR,MAAAA,UAAU,CAACqB,OAAX,CAAmBK,OAAnB,CAA4BvB,EAAD,IAAQ;AAC/B,YAAI,CAAC,KAAKK,kBAAL,CAAwBmB,GAAxB,CAA4BxB,EAA5B,CAAL,EAAsC;AAClC,eAAKoB,sBAAL,CAA4BpB,EAA5B,EAA+BG,KAA/B,EAAsCN,UAAU,CAACE,IAAjD;AACH;AACJ,OAJD;AAQH,KAdD,CAcE,OAAM0B,IAAN,EAAY;AACX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACF;;AAED,WAAO,KAAKpB,kBAAZ;AACH;;AAEDuB,EAAAA,OAAO,GAAE;AACL,WAAO,KAAKvB,kBAAL,CAAwBY,GAAxB,CAA4B,KAAKV,YAAjC,CAAP;AACH;;AApDqB;;AAuD1B,IAAIsB,eAAe,GAAG,IAAI5B,oBAAJ,EAAtB;AAEA,eAAe4B,eAAf","sourcesContent":["import ThresholdFetchService from './ThresholdFetchService';\n\n\nfunction Node(empDetails){\n    if (!empDetails)\n        return null;\n\n    let obj = {};\n    obj[empDetails.name] = {\n        'id' : empDetails.id,\n        'reports' : []\n    };\n    return obj;\n}\n\nclass EmployeeFetchService{\n\n    constructor(empId, callBack){\n        //this.empTree = new Map();\n        this.empIDToTreeNodeMap = new Map();\n        this.initialEmpId = empId;\n        this.callBack = callBack;\n    }\n\n    initEmpId(empID) {\n        this.initialEmpId = empID;\n    }\n\n    initCallBack(callBack) {\n        this.callBack = callBack;\n    }\n\n    insertIntoTree(parentEmpId,parentName, empId,node){\n        \n        this.empIDToTreeNodeMap.set(empId, node);\n        if (parentEmpId) {\n            let parentNode = this.empIDToTreeNodeMap.get(parentEmpId);\n            parentNode[parentName].reports.push(node);\n        }\n    }\n\n    async fetchAndFillEmpDetails(empId = this.initialEmpId, parentEmpId = null, parentName=''){\n\n        try {\n            let empDetails = await ThresholdFetchService.fetch(empId);\n            let treeNode = new Node(empDetails);\n            this.insertIntoTree(parentEmpId, parentName, empId, treeNode);\n            this.callBack(this.empIDToTreeNodeMap);\n            \n            empDetails.reports.forEach((id) => {\n                if (!this.empIDToTreeNodeMap.has(id)) {\n                    this.fetchAndFillEmpDetails(id,empId, empDetails.name);\n                }\n            });\n\n            \n\n        } catch(excp) {\n           // alert(excp);\n           console.log(excp);\n        }\n\n        return this.empIDToTreeNodeMap;\n    }\n\n    getJson(){\n        return this.empIDToTreeNodeMap.get(this.initialEmpId);\n    }\n}\n\nlet EmpFetchService = new EmployeeFetchService();\n\nexport default EmpFetchService;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}